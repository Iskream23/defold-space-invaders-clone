-- TODO : msg.post("main:/start_screen#game_proxy", "set_time_step", {factor = 0, mode = 1})

local lives = 3

local function load_highscore()
	local filename = sys.get_save_file("sys_save_load", "highscore")
	local data = sys.load(filename)
	return data.highscore or 0
end

local function save_highscore(highscore)
	local filename = sys.get_save_file("sys_save_load", "highscore")
	sys.save(filename, {highscore = highscore})
end

local function set_text_normal_level(level)
	gui.set_text(gui.get_node("level"), "level" .. level)
	timer.delay(2, false, function()
		gui.set_text(gui.get_node("level"), " ")
	end)
end

local function set_text_faster_level(level)
	gui.set_text(gui.get_node("level"), "level" .. level)
	gui.set_text(gui.get_node("fast"), "fast")
	timer.delay(2, false, function()
		gui.set_text(gui.get_node("level"), " ")
		gui.set_text(gui.get_node("fast"), " ")
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.paused = false
	
	self.score = 0
	self.highscore = load_highscore()

	-- set game gui texts
	gui.set_text(gui.get_node("lives"), lives)
	gui.set_text(gui.get_node("level"), " ")
	gui.set_text(gui.get_node("fast"), " ")

	timer.delay(10, false, function()
		gui.set_text(gui.get_node("instructions"), " ")
	end)
end

local function pause_game(self)
	gui.play_flipbook(gui.get_node("pause_button"), hash("pause"))
	msg.post("main:/start_screen#game_proxy", "set_time_step", {factor = 0, mode = 1})
	msg.post("/aliens#aliens_factory", "game_paused")
end

local function continue_game(self)
	gui.play_flipbook(gui.get_node("pause_button"), hash("play"))
	msg.post("main:/start_screen#game_proxy", "set_time_step", {factor = 1, mode = 1})
	msg.post("/aliens#aliens_factory", "continue_game")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		local pause_button = gui.get_node("pause_button")
		if gui.pick_node(pause_button, action.x, action.y) then
			if self.paused == false then
				pause_game()
				self.paused = true
			elseif self.paused == true then
				continue_game()
				self.paused = false
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("alien_destroyed") then
		self.score = self.score + 30
		if self.score > self.highscore then
			self.highscore = self.score
			save_highscore(self.highscore)
		end
		gui.set_text(gui.get_node("score"), self.score)
		gui.animate(gui.get_node("score"), "scale", 1.2, gui.EASING_INOUTSINE, 0.25, 0, function()
			gui.animate(gui.get_node("score"), "scale", 1, gui.EASING_INOUTSINE, 0.25, 0)
		end)
	elseif message_id == hash("player_destroyed") then
		if lives >= 0 then
			lives = lives - 1
		end
		gui.set_text(gui.get_node("lives"), lives)
	elseif message_id == hash("normal_level") then
		set_text_normal_level(message.level)
	elseif message_id == hash("faster_level") then
		set_text_faster_level(message.level)
	end
end